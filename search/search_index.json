{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the _Lib wiki!</p> <p>_Lib is a Dungeondraft mod that offers additional API to simplify implementing certain features like configs and improve mod compatibility.</p>"},{"location":"#using-_lib","title":"Using _Lib","text":"<p>To be able to access _Lib's Api put the following at the top of your mods <code>start()</code> method: <pre><code>Engine.emit_signal(\"_lib_register_mod\", self)\n</code></pre> Alternatively check if the signal exists first to ensure _Lib is actually enabled: <pre><code>if not Engine.has_signal(\"_lib_register_mod\"):\nreturn\nEngine.emit_signal(\"_lib_register_mod\", self)\n</code></pre></p> <p>After registering your mod with _Lib you will now have an entry <code>Global.API</code> available that contains all of the _Lib APIs.</p>"},{"location":"#current-api","title":"Current API","text":"<ul> <li>ApiApi</li> <li>InputMapApi</li> <li>ModConfigApi</li> <li>ModSignalingApi</li> <li>PreferencesWindowApi</li> </ul>"},{"location":"ApiApi/","title":"ApiApi","text":"<p>A Registry for all _Lib APIs.</p>"},{"location":"ApiApi/#description","title":"Description","text":"<p>All _Lib APIs are registered to and accessed from the ApiApi. It is accessed via <code>Global.API</code> and can also be used by mods to registers APIs of their own. APIs registered to the ApiApi can be directly referenced from it.</p>"},{"location":"ApiApi/#example","title":"Example:","text":"<pre><code># register the ModApi\nGlobal.API.register(\"ModApi\", mod_api_instance)\n# call some method on the ModApi\nGlobal.API.ModApi.some_method()\n</code></pre>"},{"location":"ApiApi/#methods","title":"Methods","text":"<p> void register ( String api, Object api ) </p>"},{"location":"ApiApi/#signals","title":"Signals","text":"<p>api_registered ( String api_id, Object api ):   Emitted when an API is registered. </p>"},{"location":"ApiApi/#method-descriptions","title":"Method Descriptions","text":"<p>void register ( String api, Object api ):   Registers an API under the name api </p>"},{"location":"ModSignalingApi/","title":"ModSignalingApi","text":"<p>Enables inter-mod communication.</p>"},{"location":"ModSignalingApi/#description","title":"Description","text":"<p>The ModSignalingApi is intended to be used for inter-mod communication. It uses the existing signal system but offers connect_deffered to connect to a signal either immediately or whenever it actually becomes available. It furthermore emits signal_registered ( String signal_id ) when a new user signal is added to it.</p>"},{"location":"ModSignalingApi/#methods","title":"Methods","text":"<p> void connect_deferred ( String signal_id, Object target, String method, Array binds, int flags ) void add_user_signal ( String signal_id, Array arguments ) </p>"},{"location":"ModSignalingApi/#signals","title":"Signals","text":"<p>signal_registered ( String signal_id ):   Emitted whenever a new user signal is added to the ModSignalingAPi. </p>"},{"location":"ModSignalingApi/#method-descriptions","title":"Method Descriptions","text":"<p>void connect_deferred ( String signal_id, Object target, String method, Array binds, int flags ):   Forwards the call directly to Object#connect if a signal signal_id exists. Otherwise queues the call and runs it when a user signal signal_id is added. </p> <p>void add_user_signal ( String signal_id, Array arguments ):   Overrides Object#add_user_signal. Additionally emits signal_registered ( String signal_id ) after the user signal has been added. </p>"},{"location":"PreferencesWindowApi/","title":"PreferencesWindowApi","text":"<p>An Api that makes adding additional tabs to the preferences window easy.</p>"},{"location":"PreferencesWindowApi/#description","title":"Description","text":"<p>The PreferencesWindowApi makes it possible to easily add new tabs to the preferences window using create_category ( String name, Control container ). The attached container can then interact with the preferences window using the provided methods and signals.</p>"},{"location":"PreferencesWindowApi/#methods","title":"Methods","text":"<p> Control create_category ( String name, Control container ) void show_close ( ) void show_back ( ) WindowDialog get_preferences_window ( ) </p>"},{"location":"PreferencesWindowApi/#signals","title":"Signals","text":"<p>back_pressed ( Variant ):   Emitted whenever the back button is pressed. </p> <p>apply_pressed ( Variant ):   Emitted whenever the apply button is pressed. </p> <p>about_to_show ( Variant ):   Emitted right before the preferences window would open up. Use this signal to for example rebuild Trees. </p>"},{"location":"PreferencesWindowApi/#method-descriptions","title":"Method Descriptions","text":"<p>Control create_category ( String name, Control container ):   Creates a new category in the preferences window under the name name. Attaches container if given or generates a blank VBoxContainer as the new category panel and returns it. </p> <p>void show_close ( ):   Makes the close button show and hides the back button. Each tab has their close/ back button visibility maintained seperately. </p> <p>void show_back ( ):   Makes a back button show in the preferences window instead of the normal close button. Each tab has their close/ back button visibility maintained seperately. </p> <p>WindowDialog get_preferences_window ( ):   Returns the PreferencesWindow WindowDialog. </p>"},{"location":"InputMapApi/","title":"InputMapApi","text":"<p>An Api for attaching InputEventEmitterNodes that emit signals for cancellable input events.</p>"},{"location":"InputMapApi/#description","title":"Description","text":"<p>The InputMapApi makes it possible to attach an InputEventEmitterNode as a child of a node using get_or_append_event_emitter ( Node node ). It additionally handles synchronization of ShortcutConfigNodes and has some methods for serializing and deserializing InputEventKeys.</p>"},{"location":"InputMapApi/#methods","title":"Methods","text":"<p> void define_actions ( String category, Dictionary actions ) InputEventKey deserialize_event ( String string ) String serialize_event ( InputEventKey event ) String event_as_string ( InputEventKey event ) ActionConfigSyncAgent get_agent ( String action ) ActionConfigSyncAgent get_or_create_agent ( String action, float deadzone ) InputEventEmitterNode get_or_append_event_emitter ( Node node ) InputEventEmitterNode master_event_emitter ( ) </p>"},{"location":"InputMapApi/#method-descriptions","title":"Method Descriptions","text":"<p>void define_actions ( String category, Dictionary actions ):   Registers actions to the InputMap from a Dictionary and adds them to the Shortcuts menu. actions may consist of nested dictionaries to define categories inside the Shortcuts menu. Shortcut entries can either be a String defining the action name or an Array. The arrays first entry defines the action name while the following entries define the default shortcuts, either as a String denoting the shortcut or a InputEventKey. Example: <p><pre><code>var input_definitions: Dictionary = {\n\"Some Shortcut\": [\"shortcut1\", \"Ctrl+P\", \"L\"],\n\"Some Category\":{\n\"Other Shortcut\": \"shortcut2\",\n\"Third Shortcut\": \"shortcut3\"\n}\n}\nself.Global.API.InputMapApi.define_actions(\"Example Mod\", input_definitions)\n</code></pre> </p> <p>InputEventKey deserialize_event ( String string ):   Deserializes an InputEventKey from string. </p> <p>String serialize_event ( InputEventKey event ):   Serializes event into a String. </p> <p>String event_as_string ( InputEventKey event ):   Turns event into a human readable String representation. </p> <p>ActionConfigSyncAgent get_agent ( String action ):   Gets the ActionConfigSyncAgent for action. </p> <p>ActionConfigSyncAgent get_or_create_agent ( String action, float deadzone ):   Gets or creates the ActionConfigSyncAgent for action. </p> <p>InputEventEmitterNode get_or_append_event_emitter ( Node node ):   Gets the InputEventEmitterNode attached to node or creates one if necessary. </p> <p>InputEventEmitterNode master_event_emitter ( ):   Gets the InputEventEmitterNode attached to the Master node (owner of Editor &amp; World) or creates one if necessary. </p>"},{"location":"InputMapApi/ActionConfigSyncAgent/","title":"ActionConfigSyncAgent","text":"<p>Responsible for synchronization of shortcuts between multiple shortcut config nodes.</p>"},{"location":"InputMapApi/ActionConfigSyncAgent/#description","title":"Description","text":"<p>Every action defined through the InputMapApi has its own ActionConfigSyncAgent created. It is used by the ModConfigApi to ensure shortcut config nodes displaying the same shortcut stay synchronized with eachother.</p>"},{"location":"InputMapApi/ActionConfigSyncAgent/#methods","title":"Methods","text":"<p> String get_action ( ) Array get_action_list ( ) void switch ( InputEventKey from, InputEventKey to, int index ) void deleted_item ( int index ) void added_item ( ) void add_event ( InputEventKey event ) bool is_saved ( ) </p>"},{"location":"InputMapApi/ActionConfigSyncAgent/#signals","title":"Signals","text":"<p>switched ( InputEventKey from, InputEventKey to, int index ):   Emitted when switch ( InputEventKey from, InputEventKey to, int index ) is called when a shortcut is changed in a shortcut config and forwards the parameters. from and to are the previous and new InputEventKey respectively. index is the index of the item changed in the actions event list indexed by their order in the config tree. </p> <p>deleted ( int index ):   Emitted when deleted_item ( int index ) is called when a shortcut is deleted in a shortcut config and forwards the parameters. index denotes the index of the item deleted in the actions event list indexed by their order in the config tree. </p> <p>added ( Variant ):   Emitted when added_item ( ) is called when a shortcut is deleted in a shortcut config and forwards the parameters. </p>"},{"location":"InputMapApi/ActionConfigSyncAgent/#method-descriptions","title":"Method Descriptions","text":"<p>String get_action ( ):   Returns the action this ActionConfigSyncAgent handles as a String. </p> <p>Array get_action_list ( ):   Retuns the InputEvent Array bound to this ActionConfigSyncAgents action. </p> <p>void switch ( InputEventKey from, InputEventKey to, int index ):   Emits switched ( InputEventKey from, InputEventKey to, int index ). Call to indicate that at the index from has been switched with to. </p> <p>void deleted_item ( int index ):   Emits deleted ( int index ). Call to indicate that the shortcut at index has been cleared. </p> <p>void added_item ( ):   Emits added ( Variant ). Call to indicate that a new shortcut has been added to this ActionConfigSyncAgents action. </p> <p>void add_event ( InputEventKey event ):   Adds event to this ActionConfigSyncAgents action. </p> <p>bool is_saved ( ):   Returns a bool that indicates whether the action is being saved to any config. Shortcut config nodes only allow modifying shortcuts that are actually being saved. </p>"},{"location":"InputMapApi/InputEventEmitterNode/","title":"InputEventEmitterNode","text":"<p>A Node that emits cancellable input event signals.</p>"},{"location":"InputMapApi/InputEventEmitterNode/#description","title":"Description","text":"<p>An InputEventEmitterNode can be attached as the child of any node via the InputMapApi. Any time the Node#_input, Node#_unhandled_input or Node#_unhandled_key_input method is called on it it will emit a signal accordingly. The signals provide the InputEventEmitterNode whose accept_event ( ) method can then be called to prevent further propagation of the InputEvent.</p>"},{"location":"InputMapApi/InputEventEmitterNode/#methods","title":"Methods","text":"<p> void accept_event ( ) </p>"},{"location":"InputMapApi/InputEventEmitterNode/#signals","title":"Signals","text":"<p>input ( InputEvent event, InputEventEmitterNode emitter ):   Emitted when Node#_input is called on this Node. </p> <p>unhandled_input ( InputEvent event, InputEventEmitterNode emitter ):   Emitted when Node#_unhandled_input is called on this Node. </p> <p>unhandled_key_input ( InputEventKey event, InputEventEmitterNode emitter ):   Emitted when Node#_unhandled_key_input is called on this Node. </p>"},{"location":"InputMapApi/InputEventEmitterNode/#method-descriptions","title":"Method Descriptions","text":"<p>void accept_event ( ):   Call to prevent further propagation of the received InputEvent. </p>"},{"location":"ModConfigApi/","title":"ModConfigApi","text":"<p>An Api that enables creating a mod config accessible from the \"Mods\" menu.</p>"},{"location":"ModConfigApi/#description","title":"Description","text":"<p>The ModConfigApi manages mod configs. It's only method creates a ConfigBuilder that offers methods for building a mod config that is automatically saved into a given file by the ModConfigApi.</p>"},{"location":"ModConfigApi/#methods","title":"Methods","text":"<p> ConfigBuilder create_config ( String mod_id, String title, String config_file ) </p>"},{"location":"ModConfigApi/#method-descriptions","title":"Method Descriptions","text":"<p>ConfigBuilder create_config ( String mod_id, String title, String config_file ):   Creates a new ConfigBuilder for the mod with id mod_id. The mod config will automatically be saved into and loaded from config_file. </p>"}]}